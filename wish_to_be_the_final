import cv2
import numpy as np
import urllib.request
import pyzbar.pyzbar as pyzbar
import pandas as pd
from datetime import datetime
from face_recognition import face_encodings, face_locations, face_distance
from tflite_runtime.interpreter import Interpreter
from gtts import gTTS
import firebase_admin
from firebase_admin import credentials, firestore
import base64
import os
import gc
import threading
import subprocess
from pytesseract import image_to_string
import RPi.GPIO as GPIO
import time
import pytesseract
import pygame  # For playing the audio
from pydub import AudioSegment
from pydub.playback import play
import pygame 
import io
from google.cloud.firestore_v1 import FieldFilter
import text_reader  # Import the text reading module

# Initialize pygame mixer for playing audio
pygame.mixer.init()

# Ensure TensorFlow uses CPU only
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
os.environ["QT_QPA_PLATFORM"] = "xcb"
# Global Variables
current_location = None  # Initialize current_location
encodeListKnown = []
classNames = []
qr_scanned = False
user_id = None
last_speech_times = {}  # Track last speech time for each face
speech_delay = 2  # Delay time in seconds to trigger speech again
frame_count = 0
# Firebase Initialization
if not firebase_admin._apps:  # Check if Firebase app is not already initialized
    cred = credentials.Certificate("/home/bkm/Downloads/senior-ade3b-firebase-adminsdk-9179f-c81bcee4a6.json")
    firebase_admin.initialize_app(cred)
db = firestore.client()

# Paths
url = "http://192.168.88.10/cam-hi.jpg"  # QR & other
model_path = "keras_model.tflite"
labels_path = "labels.txt"
pytesseract.pytesseract.tesseract_cmd = "tesseract"

ESP32_CAM_URL = 'http://192.168.88.11/cam-hi.jpg'  # For text

# Minimum confidence threshold for detected text
CONFIDENCE_THRESHOLD = 80  # Adjust this value as needed

# Load TFLite model
interpreter = Interpreter(model_path=model_path)
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Global flag to control modes
text_reading_mode = False
camera_lock = threading.Lock()  # Lock for camera access
stop_thread_event = threading.Event()  # Event to control thread execution

# Load labels
with open(labels_path, "r") as file:
    class_names = file.readlines()

# Global Variables
encodeListKnown = []
classNames = []
qr_scanned = False
user_id = None
last_speech_times = {}  # Track last speech time for each face
speech_delay = 2  # Delay time in seconds to trigger speech again
frame_count = 0

# GPIO Setup
button_pin_note = 17  # Change to your button pin
button_pin_text = 6
GPIO.setmode(GPIO.BCM)
GPIO.setup(button_pin_note, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(button_pin_text, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# Function to speak text
def speak(text):
    try:
        # Generate speech from text
        tts = gTTS(text=text, lang="en")
        temp_filename = "temp_audio.mp3"
        tts.save(temp_filename)

        # Initialize pygame mixer
        pygame.mixer.init()
        pygame.mixer.music.load(temp_filename)
        pygame.mixer.music.play()

        # Wait for the audio to finish playing
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

        # Clean up
        pygame.mixer.music.stop()
        pygame.mixer.quit()
    except Exception as e:
        print(f"Error during speech generation or playback: {e}")
    finally:
        # Ensure the temporary file is deleted
        if os.path.exists(temp_filename):
            try:
                os.remove(temp_filename)
            except Exception as e:
                print(f"Error deleting temporary audio file: {e}")

def speak_thread(text):
    threading.Thread(target=speak, args=(text,)).start()
def get_current_location():
    try:
        # Query the 'locations' collection (there's only one document)
        locations_ref = db.collection("locations").limit(1)
        docs = locations_ref.stream()

        for doc in docs:
            return doc.to_dict().get("room")  # Return the current room number

        return None  # No location found
    except Exception as e:
        print(f"Error fetching location from Firestore: {e}")
        return None
def monitor_location_changes():
    global current_location

    print("Starting location monitoring...")
    speak("Starting location monitoring.")

    while True:
        try:
            latest_room = get_current_location()  # Fetch the current room number
            print(f"Latest room: {latest_room}, Current location: {current_location}")  # Debug print

            if latest_room is not None and latest_room != current_location:
                # Location has changed
                print(f"Location changed to: Room {latest_room}")
                speak(f"Location changed to Room {latest_room}")
                current_location = latest_room  # Update the current location

            time.sleep(5)  # Check for changes every 5 seconds (adjust as needed)
        except Exception as e:
            print(f"Error in location monitoring: {e}")
            time.sleep(5)  # Retry after a delay
# Function to scan QR code
def scan_qr():
    global qr_scanned, user_id
    print("Waiting for QR Code scan...")
    speak("Waiting for QR Code scan.")

    prev = ""
    while not qr_scanned:
        try:
            img_resp = urllib.request.urlopen(url)
            imgnp = np.array(bytearray(img_resp.read()), dtype=np.uint8)
            frame = cv2.imdecode(imgnp, -1)

            decodedObjects = pyzbar.decode(frame)
            for obj in decodedObjects:
                pres = obj.data.decode("utf-8")
                if prev != pres:
                    print(f"QR Code Detected: {pres}")
                    speak("QR code detected.")
                    prev = pres
                    user_id = pres  # Assuming QR code contains user ID
                    qr_scanned = True
                    break  # Exit loop once scanned

            cv2.imshow("QR Scan", frame)
            if cv2.waitKey(1) & 0xFF == 27:
                break
        except Exception as e:
            print(f"QR Scan Error: {e}")
            speak("QR scan failed. Please try again.")

    cv2.destroyAllWindows()

# Function to load user images from Firebase
def load_images_from_firestore(user_id):
    images, classNames = [], []
    print(f"Fetching images for user: {user_id}")
    speak("Fetching user data from database.")

    photos_ref = db.collection("photos").where(filter=FieldFilter("userId", "==", user_id))
    docs = photos_ref.stream()

    for doc in docs:
        data = doc.to_dict()
        base64_image = data.get("image")
        name = data.get("description")

        if base64_image and name:
            img_data = base64.b64decode(base64_image)
            nparr = np.frombuffer(img_data, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

            if img is not None:
                images.append(img)
                classNames.append(name)

    print(f"Loaded {len(images)} images for encoding.")
    speak(f"Loaded {len(images)} images.")
    return images, classNames

# Function to encode faces
def findEncodings(images):
    encodings = []
    for img in images:
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        enc = face_encodings(img_rgb)
        if enc:
            encodings.append(enc[0])  # Only take first detected face

    print(f"Encoded Faces: {len(encodings)}")
    speak(f"Encoded {len(encodings)} faces.")
    return encodings

# Function to detect text using pytesseract
def has_text(image):
    try:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        text = image_to_string(gray)
        return bool(text.strip())
    except Exception as e:
        print(f"Error during text detection: {e}")
        return False

# Object Detection
def detect_object(image):
    try:
        img_resized = cv2.resize(image, (224, 224))  # Adjust based on model input size
        input_data = np.asarray(img_resized, dtype=np.float32).reshape(1, 224, 224, 3) / 127.5 - 1
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()
        output_data = interpreter.get_tensor(output_details[0]['index'])
        return np.argmax(output_data[0]), output_data[0]
    except Exception as e:
        print(f"Error in object detection: {e}")
        return None, None

# Function to process frame for face recognition, text detection, and object detection
def process_frame(img):
    global frame_count, last_speech_times

    # Object Detection (Only every 5th frame)
    if frame_count % 5 == 0:
        obj_index, prediction = detect_object(img)
        if obj_index is not None:
            class_name = class_names[obj_index].strip()
            confidence_score = prediction[obj_index]
            if confidence_score >= 0.91:
                print(f"Object Detected: {class_name} (Confidence: {confidence_score:.2f})")
                speak(f"{class_name} Detected")

    # Text Detection (Only every 10th frame)
    if frame_count % 10 == 0:
        if has_text(img):
            print("Text detected in frame.")
            speak("Text detected in frame")

    # Face Detection (Every frame)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    faces = face_locations(img_rgb, model="hog")
    encodesCurFrame = face_encodings(img_rgb, faces)

    for encodeFace, faceLoc in zip(encodesCurFrame, faces):
        faceDist = face_distance(encodeListKnown, encodeFace)
        matchIndex = np.argmin(faceDist) if faceDist.size > 0 else -1
        name = classNames[matchIndex].upper() if matchIndex != -1 and faceDist[matchIndex] < 0.4 else "UNKNOWN"

        # Only process and speak when the name is different from the last name or if enough time has passed
        current_time = datetime.now()
        if name != "UNKNOWN":
            last_time = last_speech_times.get(name, None)
            if last_time is None or (current_time - last_time).seconds >= speech_delay:
                last_speech_times[name] = current_time  # Update the last speech time
                print(f"{name} Detected")
                threading.Thread(target=speak_thread, args=(f"{name} Detected",)).start()

        # Draw rectangles around faces
        y1, x2, y2, x1 = faceLoc
        color = (0, 255, 0) if name != "UNKNOWN" else (0, 0, 255)
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
        cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

    # Display frame
    cv2.imshow("ESP32-CAM Stream", img)
    frame_count += 1
    gc.collect()

# Function to send notification to Firestore
def send_notification_to_firestore():
    global user_id  # Use the user_id obtained from QR scan

    if not user_id:
        print("Error: User ID is not available. Scan QR code first!")
        return

    print(f"Button pressed! Sending notification for User ID: {user_id} to Firestore...")
    speak('notification button pressed')
    time.sleep(1)  # Small delay before next capture

    try:
        # Create a notification reference under the specific user ID
        notification_ref = db.collection('notifications').document()
        notification_ref.set({
            'user_id': user_id,  # Store User ID
            'message': 'Call me back',
            'timestamp': firestore.SERVER_TIMESTAMP
        })
        print(f"Notification sent to Firestore under User ID: {user_id}")

    except Exception as e:
        print(f"Error sending notification to Firestore: {e}")

# Function to monitor the button state with debouncing
def button_listener_note():
    last_press_time = 0
    debounce_time = 2  # Debounce time in seconds

    while True:
        if GPIO.input(button_pin_note) == GPIO.HIGH:
            current_time = time.time()
            if current_time - last_press_time > debounce_time:
                send_notification_to_firestore()
                last_press_time = current_time
        time.sleep(0.1)  # Polling interval

def button_listener_text():
    global text_reading_mode, stop_thread_event
    last_press_time = 0
    debounce_time = 2  # Debounce time in seconds

    while True:
        if GPIO.input(button_pin_text) == GPIO.HIGH:
            current_time = time.time()
            if current_time - last_press_time > debounce_time:
                text_reading_mode = not text_reading_mode  # Toggle mode
                if text_reading_mode:
                    print("Entering text reading mode...")
                    stop_thread_event.clear()  # Reset the event
                    # Start text_main in a new thread
                    threading.Thread(target=text_main, args=(ESP32_CAM_URL, stop_thread_event), daemon=True).start()
                else:
                    print("Exiting text reading mode...")
                    stop_thread_event.set()  # Signal the thread to stop
                    speak("Exiting text reading mode")
                    time.sleep(2)  # Delay to allow the exit message to finish
                last_press_time = current_time
        time.sleep(0.2)  # Polling interval

# Set the path for Tesseract OCR executable
pytesseract.pytesseract.tesseract_cmd = "tesseract"

# Minimum confidence threshold for detected text
CONFIDENCE_THRESHOLD = 80  # Adjust this value as needed

# Initialize pygame mixer for playing audio
pygame.mixer.init()

def capture_image_from_cam(url):
    try:
        response = urllib.request.urlopen(url, timeout=5)  # Add timeout
        image_array = np.array(bytearray(response.read()), dtype=np.uint8)
        image = cv2.imdecode(image_array, -1)

        if image is None:
            print("Error: Could not decode image from ESP32-CAM.")
            return None
        return image
    except urllib.error.URLError as e:
        print(f"Error fetching image from ESP32-CAM: {e}")
        return None
    except Exception as e:
        print(f"Unexpected error in capture_image_from_cam: {e}")
        return None

def preprocess_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)  # Apply Gaussian blur

    # Apply adaptive thresholding for better OCR accuracy
    processed_image = cv2.adaptiveThreshold(
        blurred, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2
    )
    return processed_image

def recognize_text_line_by_line(image):
    config = "--psm 6 --oem 3"  # Tesseract OCR configuration
    data = pytesseract.image_to_data(image, config=config, lang="eng", output_type=pytesseract.Output.DICT)

    # Store lines of text
    lines = []
    current_line = []
    last_line_num = -1  # Track the last processed line number

    for i in range(len(data["text"])):
        word = data["text"][i].strip()
        confidence = int(data["conf"][i])
        line_num = data["line_num"][i]  # Get the line number

        if word and confidence >= CONFIDENCE_THRESHOLD:
            if line_num != last_line_num and current_line:
                lines.append(" ".join(current_line))
                current_line = []  # Reset for new line
            current_line.append(word)
            last_line_num = line_num

    if current_line:
        lines.append(" ".join(current_line))  # Add the last line

    return lines

def speak_lines(lines):
    for line in lines:
        if line:
            print(f"Reading Line: {line}")

            try:
                # Convert line to speech
                tts = gTTS(text=line, lang='en')
                
                # Save the speech to a temporary file
                temp_filename = "temp_audio.mp3"
                tts.save(temp_filename)
                
                # Initialize pygame mixer if not already initialized
                if not pygame.mixer.get_init():
                    pygame.mixer.init()

                # Load and play the audio
                pygame.mixer.music.load(temp_filename)
                pygame.mixer.music.play()

                # Wait until the speech finishes playing
                while pygame.mixer.music.get_busy():
                    time.sleep(2)

                # Stop playback and unload the file
                pygame.mixer.music.stop()
                pygame.mixer.music.unload()  # Unload the file to release resources

                # Delete the file after playing
                os.remove(temp_filename)

            except Exception as e:
                print(f"Error in text-to-speech conversion: {e}")
                # Reinitialize pygame mixer if an error occurs
                pygame.mixer.quit()
                pygame.mixer.init()

def text_main(esp32_cam_url, stop_event):
    print("Starting text reading mode...")
    while not stop_event.is_set():
        # Capture image from ESP32-CAM
        image = capture_image_from_cam(esp32_cam_url)

        if image is not None:
            # Preprocess the image
            processed_image = preprocess_image(image)

            # Recognize text line by line
            detected_lines = recognize_text_line_by_line(processed_image)

            if detected_lines:
                speak_lines(detected_lines)  # Read text aloud, line by line
            else:
                print("No confident text detected.")

        time.sleep(2)  # Small delay before next capture

    print("Exiting text reading mode...")

# Main program execution
if __name__ == "__main__":
    # Start button listener in a separate thread
    threading.Thread(target=button_listener_note, daemon=True).start()
    threading.Thread(target=button_listener_text, daemon=True).start()

    # Scan QR Code
    scan_qr()

    # Load user data
    print(f"Loading user data for: {user_id}")
    images, classNames = load_images_from_firestore(user_id)
    encodeListKnown = findEncodings(images)

    if len(encodeListKnown) == 0:
        print("No face encodings found! Face recognition will not work.")
        speak("Error. No known faces detected.")
    else:
        speak("The system is active now.")

    # Start location monitoring in a separate thread
    threading.Thread(target=monitor_location_changes, daemon=True).start()

    # Initialize pygame mixer for playing audio
    if not pygame.mixer.get_init():
        pygame.mixer.init()

    # Main loop
    while True:
        try:
            if not text_reading_mode:  # Only run face/object detection if not in text reading mode
                with camera_lock:  # Ensure exclusive access to the camera
                    img_resp = urllib.request.urlopen(url)
                    imgnp = np.array(bytearray(img_resp.read()), dtype=np.uint8)
                    img = cv2.imdecode(imgnp, -1)
                    img = cv2.resize(img, (640, 480))
                    img = cv2.transpose(img)
                    img = cv2.flip(img, flipCode=0)
                    process_frame(img)

            # Exit on 'q' key press
            if cv2.waitKey(1) & 0xFF == ord("q"):
                break
        except Exception as e:
            print(f"Error processing stream: {e}")
            speak("Error in processing camera stream.")
            break

    cv2.destroyAllWindows()
    GPIO.cleanup()
