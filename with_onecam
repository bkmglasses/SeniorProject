import cv2
import numpy as np
import urllib.request
import pyzbar.pyzbar as pyzbar
import threading
import time
import subprocess
import firebase_admin
from firebase_admin import credentials, firestore
from gtts import gTTS
from face_recognition import face_encodings, face_locations, face_distance
from tflite_runtime.interpreter import Interpreter
import RPi.GPIO as GPIO
import base64
import os

# Ensure TensorFlow uses CPU only
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# Firebase Initialization
cred = credentials.Certificate("/home/bkm/Downloads/senior-ade3b-firebase-adminsdk-9179f-c81bcee4a6.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# Camera URL
url = "http://192.168.88.12/cam-hi.jpg"

# Load TensorFlow Lite Model
model_path = "keras_model.tflite"
interpreter = Interpreter(model_path=model_path)
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Global Variables
encodeListKnown = []
classNames = []
qr_scanned = False
user_id = None
system_ready = False

# GPIO Setup
button_pin = 26  # Button for Firestore Notification
GPIO.setmode(GPIO.BCM)
GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# **Speech Function**
def speak(text):
    try:
        tts = gTTS(text=text, lang="en")
        tts.save("temp_audio.mp3")
        subprocess.Popen(["mpg321", "temp_audio.mp3"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)  # Prevents overlapping audio issues
    except Exception as e:
        print(f"Error with gTTS speech: {e}")

# **QR Code Scanning**
def scan_qr():
    global qr_scanned, user_id, system_ready
    print("Waiting for QR Code scan...")
    speak("Waiting for QR Code scan.")

    while not qr_scanned:
        try:
            img_resp = urllib.request.urlopen(url)
            imgnp = np.array(bytearray(img_resp.read()), dtype=np.uint8)
            frame = cv2.imdecode(imgnp, -1)

            decodedObjects = pyzbar.decode(frame)
            for obj in decodedObjects:
                user_id = obj.data.decode("utf-8")
                print(f"QR Code Detected: {user_id}")
                speak("QR code detected.")
                qr_scanned = True
                break

            cv2.imshow("QR Scan", frame)
            if cv2.waitKey(1) & 0xFF == 27:
                break
        except Exception as e:
            print(f"QR Scan Error: {e}")
            speak("QR scan failed. Please try again.")

    cv2.destroyAllWindows()
    load_faces_from_firestore()
    system_ready = True  # System now starts face detection

# **Load User Faces from Firebase**
def load_faces_from_firestore():
    global encodeListKnown, classNames
    images, classNames = [], []

    print(f"Fetching images for user: {user_id}")
    speak("Fetching user data from database.")

    photos_ref = db.collection("photos").where("userId", "==", user_id)
    docs = list(photos_ref.stream())

    if not docs:
        print("No images found in Firestore for this user.")
        speak("Error, no images found.")
        return

    for doc in docs:
        data = doc.to_dict()
        base64_image = data.get("image")
        name = data.get("description")

        if base64_image and name:
            img_data = base64.b64decode(base64_image)
            nparr = np.frombuffer(img_data, np.uint8)
            img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

            if img is not None:
                images.append(img)
                classNames.append(name)

    encodeListKnown = encode_faces(images)
    print(f"Loaded {len(images)} images for encoding.")
    speak(f"Loaded {len(images)} faces.")

# **Encode Faces**
def encode_faces(images):
    encodings = []
    for img in images:
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        enc = face_encodings(img_rgb)
        if enc:
            encodings.append(enc[0])
    return encodings

# **Object Detection**
def detect_object(image):
    try:
        img_resized = cv2.resize(image, (224, 224))
        input_data = np.asarray(img_resized, dtype=np.float32).reshape(1, 224, 224, 3) / 127.5 - 1
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()
        output_data = np.copy(interpreter.get_tensor(output_details[0]['index']))
        return np.argmax(output_data[0]), output_data[0]
    except Exception as e:
        print(f"Error in object detection: {e}")
        return None, None

# **Send Notification to Firestore**
def send_notification_to_firestore():
    if not user_id:
        print("Error: User ID is not available. Scan QR code first!")
        return
    
    try:
        notification_ref = db.collection('notifications').document()
        notification_ref.set({
            'user_id': user_id,
            'message': 'Call me back',
            'timestamp': firestore.SERVER_TIMESTAMP
        })
        print(f"Notification sent to Firestore under User ID: {user_id}")
    except Exception as e:
        print(f"Error sending notification to Firestore: {e}")

# **Monitor Button for Firestore Notification**
def button_listener():
    last_press_time = 0
    debounce_time = 2

    while True:
        if GPIO.input(button_pin) == GPIO.HIGH:
            current_time = time.time()
            if current_time - last_press_time > debounce_time:
                send_notification_to_firestore()
                last_press_time = current_time
        time.sleep(0.1)

# **Process Face & Object Detection**
def process_stream():
    global system_ready

    while True:
        if not system_ready:
            time.sleep(1)
            continue

        try:
            img_resp = urllib.request.urlopen(url)
            imgnp = np.array(bytearray(img_resp.read()), dtype=np.uint8)
            img = cv2.imdecode(imgnp, -1)
            img = cv2.resize(img, (640, 480))

            # Face Detection
            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            faces = face_locations(img_rgb, model="hog")
            encodesCurFrame = face_encodings(img_rgb, faces)

            for encodeFace, faceLoc in zip(encodesCurFrame, faces):
                faceDist = face_distance(encodeListKnown, encodeFace)
                matchIndex = np.argmin(faceDist) if faceDist.size > 0 else -1
                name = classNames[matchIndex].upper() if matchIndex != -1 and faceDist[matchIndex] < 0.4 else "UNKNOWN"

                if name != "UNKNOWN":
                    speak(f"{name} detected.")

            # Object Detection
            obj_index, prediction = detect_object(img)
            if obj_index is not None:
                class_name = class_names[obj_index].strip()
                confidence_score = prediction[obj_index]
                if confidence_score >= 0.91:
                    print(f"Object Detected: {class_name} (Confidence: {confidence_score:.2f})")
                    speak(f"{class_name} Detected")

            cv2.imshow("Camera Stream", img)

            if cv2.waitKey(1) & 0xFF == ord("q"):
                break
        except Exception as e:
            print(f"Error processing stream: {e}")

    cv2.destroyAllWindows()

# **Main Execution**
if __name__ == "__main__":
    threading.Thread(target=button_listener, daemon=True).start()
    scan_qr()
    threading.Thread(target=process_stream).start()
