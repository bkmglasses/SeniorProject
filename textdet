import cv2
import numpy as np
import urllib.request
import os
import gc
import pandas as pd
from datetime import datetime
from face_recognition import face_encodings, face_locations, face_distance
from tflite_runtime.interpreter import Interpreter
from pytesseract import image_to_string
from gtts import gTTS
import threading
import subprocess

# Ensure TensorFlow uses CPU only
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# Paths and URLs
path = r'/home/bkm/Desktop/attendance/image_folder'  # Adjust for your face images directory
url = 'http://192.168.88.8/cam-hi.jpg'  # Adjust to your ESP32-CAM streaming URL
attendance_folder = os.path.join(os.getcwd(), 'attendance')
attendance_file = os.path.join(attendance_folder, "Attendance.csv")
model_path = "keras_model.tflite"  # Adjust to your TensorFlow Lite model path
labels_path = "labels.txt"

# Create necessary directories and files
os.makedirs(attendance_folder, exist_ok=True)
if not os.path.exists(attendance_file):
    pd.DataFrame(columns=["Name", "Time"]).to_csv(attendance_file, index=False)

# Load attendance file
def markAttendance(name):
    try:
        df = pd.read_csv(attendance_file)
        if name not in df["Name"].values:
            now = datetime.now()
            dtString = now.strftime('%H:%M:%S')
            new_entry = pd.DataFrame({"Name": [name], "Time": [dtString]})
            df = pd.concat([df, new_entry], ignore_index=True)
            df.to_csv(attendance_file, index=False)
    except Exception as e:
        print(f"Error saving attendance: {e}")

# Load known face images
images, classNames = [], []
for file_name in os.listdir(path):
    img = cv2.imread(os.path.join(path, file_name))
    if img is not None:
        images.append(img)
        classNames.append(os.path.splitext(file_name)[0])

def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encodings = face_encodings(img)
        if encodings:
            encodeList.append(encodings[0])
    return encodeList

encodeListKnown = findEncodings(images)
print("Face encoding completed.")

# Load TFLite model
interpreter = Interpreter(model_path=model_path)
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Load labels
with open(labels_path, "r") as file:
    class_names = file.readlines()

# Function to detect text using pytesseract
def has_text(image):
    try:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        text = image_to_string(gray)
        return text.strip()
    except Exception as e:
        print(f"Error during text detection: {e}")
        return ""

# Object Detection
def detect_object(image):
    try:
        img_resized = cv2.resize(image, (224, 224))  # Adjust based on model input size
        input_data = np.asarray(img_resized, dtype=np.float32).reshape(1, 224, 224, 3) / 127.5 - 1
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()
        output_data = interpreter.get_tensor(output_details[0]['index'])
        return np.argmax(output_data[0]), output_data[0]
    except Exception as e:
        print(f"Error in object detection: {e}")
        return None, None

# Function to process frames
frame_count = 0
detected_text_accumulated = ""  # Variable to accumulate detected text
def process_frame(img):
    global frame_count, detected_text_accumulated
    try:
        # Object Detection (Only every 5th frame)
        if frame_count % 5 == 0:
            obj_index, prediction = detect_object(img)
            if obj_index is not None:
                class_name = class_names[obj_index].strip()
                confidence_score = prediction[obj_index]
                if confidence_score >= 0.91:
                    print(f"Object Detected: {class_name} (Confidence: {confidence_score:.2f})")
                    speak(f"{class_name} Detected")

        # Text Detection (Only every 10th frame)
        if frame_count % 10 == 0:
            detected_text = has_text(img)
            if detected_text:
                print(f"Text Detected: {detected_text}")
                detected_text_accumulated += detected_text + " "  # Accumulate text

        # If enough text has been accumulated, speak it out
        if frame_count % 50 == 0 and detected_text_accumulated.strip():
            print(f"Speaking Detected Text: {detected_text_accumulated.strip()}")
            speak(detected_text_accumulated.strip())
            detected_text_accumulated = ""  # Reset the accumulated text

        # Face Detection (Every frame)
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        faces = face_locations(img_rgb, model="hog")
        encodesCurFrame = face_encodings(img_rgb, faces)

        for encodeFace, faceLoc in zip(encodesCurFrame, faces):
            faceDist = face_distance(encodeListKnown, encodeFace)
            matchIndex = np.argmin(faceDist) if faceDist.size > 0 else -1
            name = classNames[matchIndex].upper() if matchIndex != -1 and faceDist[matchIndex] < 0.6 else "UNKNOWN"
            if name != "UNKNOWN":
                markAttendance(name)
                threading.Thread(target=speak_thread, args=(f"{name} Detected",)).start()
            print(name)

            # Draw rectangles around faces
            y1, x2, y2, x1 = faceLoc
            color = (0, 255, 0) if name != "UNKNOWN" else (0, 0, 255)
            cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
            cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

        # Display frame
        cv2.imshow("ESP32-CAM Stream", img)
        frame_count += 1
        gc.collect()
    except Exception as e:
        print(f"Error processing frame: {e}")

# Function to speak using gTTS (Google Text-to-Speech)
def speak(text):
    try:
        tts = gTTS(text=text, lang='en')
        tts.save("temp_audio.mp3")
        # Play the audio using mpg321 or any player you prefer
        subprocess.call(["mpg321", "temp_audio.mp3"])  # Plays the audio
    except Exception as e:
        print(f"Error with gTTS speech: {e}")

# Function to speak in a separate thread
def speak_thread(text):
    speak(text)

# Main loop for ESP32 stream
while True:
    try:
        img_resp = urllib.request.urlopen(url)
        imgnp = np.array(bytearray(img_resp.read()), dtype=np.uint8)
        img = cv2.imdecode(imgnp, -1)

        # Resize image to reduce load
        img = cv2.resize(img, (640, 480))

        # Rotate image if necessary
        img = cv2.transpose(img)
        img = cv2.flip(img, flipCode=0)

        # Process frame
        process_frame(img)

        # Exit on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    except Exception as e:
        print(f"Error processing webcam stream: {e}")
        break

cv2.destroyAllWindows()
